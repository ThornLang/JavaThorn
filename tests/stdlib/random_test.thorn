import "random";
import { assert_true, assert_equals, assert_not_null, assert_greater_equal, assert_less_equal, test, suite, run_all } from "test";

// Test: Random module functionality
// Tests random number generation, sampling, and distributions

suite("Random Module Tests", $() => {
    test("basic random generation", $() => {
        rand_float = random();
        rand_int = randint(1, 10);
        rand_float_range = randfloat(0, 100);
        rand_bool = randbool();
        
        assert_greater_equal(rand_float, 0, "random() should be >= 0");
        assert_less_equal(rand_float, 1, "random() should be < 1");
        assert_greater_equal(rand_int, 1, "randint should be >= min");
        assert_less_equal(rand_int, 10, "randint should be <= max");
        assert_greater_equal(rand_float_range, 0, "randfloat should be >= min");
        assert_less_equal(rand_float_range, 100, "randfloat should be < max");
        assert_true(rand_bool == true || rand_bool == false, "randbool should be boolean");
    });

    test("random bytes", $() => {
        bytes = randbytes(5);
        assert_not_null(bytes, "randbytes should return non-null");
        assert_equals(5, bytes.length, "randbytes should return correct length");
        
        // Each byte should be in valid range
        for (i = 0; i < bytes.length; i = i + 1) {
            byte_val = bytes[i];
            assert_greater_equal(byte_val, 0, "byte should be >= 0");
            assert_less_equal(byte_val, 255, "byte should be <= 255");
        }
    });

    test("seeding for reproducibility", $() => {
        seed(42);
        val1 = random();
        val2 = random();
        seed(42);  // Reset with same seed
        val3 = random();
        val4 = random();
        
        assert_equals(val1, val3, "first seeded values should match");
        assert_equals(val2, val4, "second seeded values should match");
    });

    test("choice and sampling", $() => {
        colors = ["red", "green", "blue", "yellow", "purple"];
        
        // Test single choice
        chosen_color = choice(colors);
        assert_not_null(chosen_color, "choice should return non-null");
        assert_true(colors.includes(chosen_color), "choice should return item from array");
        
        // Multiple choices with replacement
        picks = choices(colors, 3, null);
        assert_equals(3, picks.length, "choices should return correct length");
        
        // Sample without replacement
        sample_colors = sample(colors, 3);
        assert_equals(3, sample_colors.length, "sample should return correct length");
        
        // Check no duplicates in sample
        unique_count = 0;
        for (i = 0; i < sample_colors.length; i = i + 1) {
            is_unique = true;
            for (j = 0; j < i; j = j + 1) {
                if (sample_colors[i] == sample_colors[j]) {
                    is_unique = false;
                }
            }
            if (is_unique) {
                unique_count = unique_count + 1;
            }
        }
        assert_equals(3, unique_count, "sample should have no duplicates");
    });

    test("shuffling", $() => {
        numbers = [1, 2, 3, 4, 5];
        original_sum = numbers[0] + numbers[1] + numbers[2] + numbers[3] + numbers[4];
        
        // Test shuffled copy
        shuffled_copy = shuffled(numbers);
        shuffled_sum = shuffled_copy[0] + shuffled_copy[1] + shuffled_copy[2] + shuffled_copy[3] + shuffled_copy[4];
        
        assert_equals(5, shuffled_copy.length, "shuffled copy should have same length");
        assert_equals(original_sum, shuffled_sum, "shuffled copy should have same elements");
        
        // Test in-place shuffle
        shuffle(numbers);
        new_sum = numbers[0] + numbers[1] + numbers[2] + numbers[3] + numbers[4];
        assert_equals(original_sum, new_sum, "in-place shuffle should preserve elements");
    });

    test("distributions", $() => {
        normal_val = normal(0, 1);
        normal_val2 = normal(100, 15);
        exp_val = exponential(0.5);
        uniform_val = uniform(10, 20);
        
        assert_not_null(normal_val, "normal distribution should return value");
        assert_not_null(normal_val2, "normal distribution with params should return value");
        assert_greater_equal(exp_val, 0, "exponential should be >= 0");
        assert_greater_equal(uniform_val, 10, "uniform should be >= min");
        assert_less_equal(uniform_val, 20, "uniform should be <= max");
    });

    test("string generation", $() => {
        rand_str = rand_string(10, null);
        assert_not_null(rand_str, "rand_string should return non-null");
        assert_equals(10, rand_str.length, "rand_string should have correct length");
        
        custom_chars = "ABC123";
        custom_str = rand_string(8, custom_chars);
        assert_equals(8, custom_str.length, "custom rand_string should have correct length");
        
        // Check all chars are from custom set
        valid_chars = true;
        for (i = 0; i < custom_str.length; i = i + 1) {
            char = custom_str[i];
            if (!custom_chars.includes(char)) {
                valid_chars = false;
            }
        }
        assert_true(valid_chars, "custom string should only use specified characters");
        
        // UUID generation
        uuid = uuid4();
        assert_not_null(uuid, "UUID should be generated");
        assert_equals(36, uuid.length, "UUID should have standard length");
        
        // Hex string
        hex_str = hex_string(8);
        assert_equals(16, hex_str.length, "hex string should be 2x byte count");
    });

    test("cryptographic random", $() => {
        crypto_val = crypto_random();
        crypto_int = crypto_randint(1000, 9999);
        crypto_bytes = crypto_randbytes(4);
        crypto_tok = crypto_token(16);
        
        assert_greater_equal(crypto_val, 0, "crypto random should be >= 0");
        assert_less_equal(crypto_val, 1, "crypto random should be < 1");
        assert_greater_equal(crypto_int, 1000, "crypto randint should be >= min");
        assert_less_equal(crypto_int, 9999, "crypto randint should be <= max");
        assert_equals(4, crypto_bytes.length, "crypto bytes should have correct length");
        assert_not_null(crypto_tok, "crypto token should be generated");
    });

    test("weighted choice", $() => {
        items = [["common", 10.0], ["rare", 2.0], ["legendary", 0.5]];
        
        // Test a few weighted choices
        for (i = 0; i < 10; i = i + 1) {
            item = weighted_choice(items);
            valid_item = (item == "common" || item == "rare" || item == "legendary");
            assert_true(valid_item, "weighted choice should return valid item");
        }
    });
});

run_all();