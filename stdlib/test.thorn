// Test framework module for ThornLang
// Provides comprehensive testing capabilities including assertions, test runners, and mocking

// ==================== Type Definitions ====================
// Define structured types for better type safety using type aliases
// Note: Ok and Error are built-in as of PR #74, so we can use them directly

% TestCase = Dict[string, Any];
% TestSuite = Dict[string, Any];
% TestResult = Dict[string, Any];

// ==================== Test Context ====================
// Test suite storage and current context  
_test_suites: Array[TestSuite] = [];
_current_suite: TestSuite = null;
_current_test: TestCase = null;
_test_results: Array[TestResult] = [];
_exit_on_failure: boolean = false;
_verbose_mode: boolean = false;

// ==================== Core Assertions ====================

$ assert_true(condition: boolean, message: string): void {
    if (!condition) {
        errorMsg: string = "Expected true but was false";
        if (message != null) {
            errorMsg = errorMsg + ": " + message;
        }
        _fail(errorMsg);
    }
}

$ assert_true(condition: boolean): void {
    assert_true(condition, null);
}

$ assert_false(condition: boolean, message: string): void {
    if (condition) {
        errorMsg: string = "Expected false but was true";
        if (message != null) {
            errorMsg = errorMsg + ": " + message;
        }
        _fail(errorMsg);
    }
}

$ assert_false(condition: boolean): void {
    assert_false(condition, null);
}

$ assert_equals(expected: Any, actual: Any, message: string): void {
    if (expected != actual) {
        errorMsg: string = "Expected " + _format_value(expected) + " but was " + _format_value(actual);
        if (message != null) {
            errorMsg = errorMsg + ": " + message;
        }
        _fail(errorMsg);
    }
}

$ assert_equals(expected: Any, actual: Any): void {
    assert_equals(expected, actual, null);
}

$ assert_not_equals(expected: Any, actual: Any, message: string): void {
    if (expected == actual) {
        errorMsg: string = "Expected values to be different but both were " + _format_value(expected);
        if (message != null) {
            errorMsg = errorMsg + ": " + message;
        }
        _fail(errorMsg);
    }
}

$ assert_not_equals(expected: Any, actual: Any): void {
    assert_not_equals(expected, actual, null);
}

$ assert_null(value: Any, message: string): void {
    if (value != null) {
        errorMsg: string = "Expected null but was " + _format_value(value);
        if (message != null) {
            errorMsg = errorMsg + ": " + message;
        }
        _fail(errorMsg);
    }
}

$ assert_null(value: Any): void {
    assert_null(value, null);
}

$ assert_not_null(value: Any, message: string): void {
    if (value == null) {
        if (message != null) {
            _fail("Expected non-null value: " + message);
        } else {
            _fail("Expected non-null value");
        }
    }
}

$ assert_not_null(value: Any): void {
    assert_not_null(value, null);
}

// ==================== Numeric Assertions ====================

$ assert_greater_than(actual: number, expected: number, message: string): void {
    if (actual <= expected) {
        if (message != null) {
            _fail("Expected " + actual + " > " + expected + ": " + message);
        } else {
            _fail("Expected " + actual + " > " + expected);
        }
    }
}

$ assert_greater_than(actual: number, expected: number): void {
    assert_greater_than(actual, expected, null);
}

$ assert_less_than(actual: number, expected: number, message: string): void {
    if (actual >= expected) {
        if (message != null) {
            _fail("Expected " + actual + " < " + expected + ": " + message);
        } else {
            _fail("Expected " + actual + " < " + expected);
        }
    }
}

$ assert_less_than(actual: number, expected: number): void {
    assert_less_than(actual, expected, null);
}

$ assert_greater_equal(actual: number, expected: number, message: string): void {
    if (actual < expected) {
        if (message != null) {
            _fail("Expected " + actual + " >= " + expected + ": " + message);
        } else {
            _fail("Expected " + actual + " >= " + expected);
        }
    }
}

$ assert_greater_equal(actual: number, expected: number): void {
    assert_greater_equal(actual, expected, null);
}

$ assert_less_equal(actual: number, expected: number, message: string): void {
    if (actual > expected) {
        if (message != null) {
            _fail("Expected " + actual + " <= " + expected + ": " + message);
        } else {
            _fail("Expected " + actual + " <= " + expected);
        }
    }
}

$ assert_less_equal(actual: number, expected: number): void {
    assert_less_equal(actual, expected, null);
}

$ assert_almost_equal(expected: number, actual: number, delta: number, message: string): void {
    diff: number = expected - actual;
    if (diff < 0) {
        diff = -diff;
    }
    if (diff > delta) {
        if (message != null) {
            _fail("Expected " + expected + " ± " + delta + " but was " + actual + ": " + message);
        } else {
            _fail("Expected " + expected + " ± " + delta + " but was " + actual);
        }
    }
}

$ assert_almost_equal(expected: number, actual: number, delta: number): void {
    assert_almost_equal(expected, actual, delta, null);
}

// ==================== String Assertions ====================

$ assert_contains(haystack: string, needle: string, message: string): void {
    if (haystack == null || needle == null) {
        if (message != null) {
            _fail("Cannot check contains with null values: " + message);
        } else {
            _fail("Cannot check contains with null values");
        }
    }
    
    if (!haystack.includes(needle)) {
        if (message != null) {
            _fail("Expected \"" + haystack + "\" to contain \"" + needle + "\": " + message);
        } else {
            _fail("Expected \"" + haystack + "\" to contain \"" + needle + "\"");
        }
    }
}

$ assert_contains(haystack: string, needle: string): void {
    assert_contains(haystack, needle, null);
}

$ assert_starts_with(str: string, prefix: string, message: string): void {
    if (str == null || prefix == null) {
        if (message != null) {
            _fail("Cannot check starts_with with null values: " + message);
        } else {
            _fail("Cannot check starts_with with null values");
        }
    }
    
    if (!str.startsWith(prefix)) {
        if (message != null) {
            _fail("Expected \"" + str + "\" to start with \"" + prefix + "\": " + message);
        } else {
            _fail("Expected \"" + str + "\" to start with \"" + prefix + "\"");
        }
    }
}

$ assert_starts_with(str: string, prefix: string): void {
    assert_starts_with(str, prefix, null);
}

$ assert_ends_with(str: string, suffix: string, message: string): void {
    if (str == null || suffix == null) {
        if (message != null) {
            _fail("Cannot check ends_with with null values: " + message);
        } else {
            _fail("Cannot check ends_with with null values");
        }
    }
    
    if (!str.endsWith(suffix)) {
        if (message != null) {
            _fail("Expected \"" + str + "\" to end with \"" + suffix + "\": " + message);
        } else {
            _fail("Expected \"" + str + "\" to end with \"" + suffix + "\"");
        }
    }
}

$ assert_ends_with(str: string, suffix: string): void {
    assert_ends_with(str, suffix, null);
}

// ==================== Collection Assertions ====================

$ assert_includes[T](collection: Array[T], element: T, message: string): void {
    found: boolean = collection.includes(element);
    
    if (!found) {
        if (message != null) {
            _fail("Expected " + _format_value(collection) + " to include " + _format_value(element) + ": " + message);
        } else {
            _fail("Expected " + _format_value(collection) + " to include " + _format_value(element));
        }
    }
}

$ assert_includes[T](collection: Array[T], element: T): void {
    assert_includes(collection, element, null);
}

$ assert_empty[T](collection: Array[T], message: string): void {
    if (collection == null || collection.length != 0) {
        if (message != null) {
            _fail("Expected empty collection but was " + _format_value(collection) + ": " + message);
        } else {
            _fail("Expected empty collection but was " + _format_value(collection));
        }
    }
}

$ assert_empty[T](collection: Array[T]): void {
    assert_empty(collection, null);
}

$ assert_not_empty[T](collection: Array[T], message: string): void {
    if (collection == null || collection.length == 0) {
        if (message != null) {
            _fail("Expected non-empty collection: " + message);
        } else {
            _fail("Expected non-empty collection");
        }
    }
}

$ assert_not_empty[T](collection: Array[T]): void {
    assert_not_empty(collection, null);
}

$ assert_size[T](collection: Array[T], expected_size: number, message: string): void {
    actual_size: number = collection.length;
    
    if (actual_size != expected_size) {
        if (message != null) {
            _fail("Expected size " + expected_size + " but was " + actual_size + ": " + message);
        } else {
            _fail("Expected size " + expected_size + " but was " + actual_size);
        }
    }
}

$ assert_size[T](collection: Array[T], expected_size: number): void {
    assert_size(collection, expected_size, null);
}

// ==================== Exception Assertions ====================

// New try-catch based assert_throws
$ assert_throws(function: Function[(), void], expected_message: string, test_name: string): void {
    try {
        function();
        _fail("Expected function to throw but it didn't: " + test_name);
    } catch (error) {
        if (expected_message != null) {
            error_str: string = "" + error;
            if (error_str != expected_message) {
                _fail("Expected error \"" + expected_message + 
                     "\" but got \"" + error_str + "\" in: " + test_name);
            }
        }
        // Test passes - function threw as expected
    }
}

$ assert_throws(function: Function[(), void], expected_message: string): void {
    assert_throws(function, expected_message, "");
}

$ assert_throws(function: Function[(), void]): void {
    assert_throws(function, null, "");
}

// Legacy Result-based assert_throws (for compatibility)
$ assert_throws_result(function: Function[(), Result[Any, Any]], expected_message: string): void {
    result = function();
    
    match (result) {
        Ok(value) => {
            _fail("Expected function to throw but it returned: " + _format_value(value));
        },
        Error(error) => {
            if (expected_message != null) {
                error_str: string = "" + error;
                if (!error_str.includes(expected_message)) {
                    _fail("Expected error message to contain \"" + expected_message + 
                         "\" but was \"" + error_str + "\"");
                }
            }
            // Test passes - function threw as expected
        },
    };
}

$ assert_throws(function: Function[(), Result[Any, Any]]): void {
    result = function();
    
    match (result) {
        Ok(value) => {
            _fail("Expected function to throw but it returned: " + _format_value(value));
        },
        Error(error) => {
            // Test passes - function threw as expected
        },
    };
}

$ assert_no_throw(function: Function[(), void]): void {
    try {
        function();
        // Test passes - function didn't throw
    } catch (error) {
        _fail("Expected no exception but got: " + error);
    }
}

// Legacy Result-based assert_no_throw (for compatibility)
$ assert_no_throw_result(function: Function[(), Result[Any, Any]]): void {
    result = function();
    
    match (result) {
        Ok(value) => {
            // Test passes - function didn't throw
            null;
        },
        Error(error) => _fail("Expected no exception but got: " + error),
    };
}

// ==================== Test Definition ====================

$ test(name: string, test_function: Function[(), void]): void {
    test_case: TestCase = {
        "name": name,
        "function": test_function,
        "skipped": false
    };
    
    if (_current_suite != null) {
        _current_suite["tests"].push(test_case);
    } else {
        // Create default suite if none exists
        default_suite: TestSuite = {
            "name": "Default",
            "tests": []
        };
        default_suite["tests"].push(test_case);
        _test_suites.push(default_suite);
        _current_suite = default_suite;
    }
}

$ suite(name: string, suite_function: Function[(), void]): void {
    suite: TestSuite = {
        "name": name,
        "tests": []
    };
    
    previous_suite: TestSuite = _current_suite;
    _current_suite = suite;
    
    // Execute suite function to collect tests
    suite_function();
    
    _current_suite = previous_suite;
    _test_suites.push(suite);
}

$ skip(name: string, test_function: Function[(), void]): void {
    test_case: TestCase = {
        "name": name,
        "function": test_function,
        "skipped": true
    };
    
    if (_current_suite != null) {
        _current_suite["tests"].push(test_case);
    }
}

// ==================== Test Execution ====================

$ run_all(): boolean {
    _test_results = [];
    
    for (suite in _test_suites) {
        _run_suite_object(suite);
    }
    
    _print_summary();
    
    if (_exit_on_failure && _has_failures()) {
        // In Thorn, we can't call System.exit, so just return failure indicator
        return false;
    }
    return true;
}

$ run_suite(suite_name: string): void {
    found_suite: TestSuite = null;
    for (suite in _test_suites) {
        if (suite["name"] == suite_name) {
            found_suite = suite;
        }
    }
    
    if (found_suite == null) {
        print("ERROR: Test suite '" + suite_name + "' not found");
        return;
    }
    
    _run_suite_object(found_suite);
}

$ _run_suite_object(suite: TestSuite): void {
    print("\n🧪 Running suite: " + suite["name"]);
    print("=" + _repeat_string("=", 49));
    
    for (test_case in suite["tests"]) {
        _run_test(test_case, suite);
    }
}

$ _run_test(test_case: TestCase, suite: TestSuite): void {
    if (test_case["skipped"]) {
        result: TestResult = {
            "test": test_case,
            "suite": suite,
            "passed": false,
            "skipped": true,
            "duration": 0,
            "error": null
        };
        _test_results.push(result);
        print("⏭️  SKIPPED: " + test_case["name"]);
        return;
    }
    
    _current_test = test_case;
    start_time: number = clock();
    passed: boolean = false;
    error: string = null;
    
    // Execute test
    test_function: Function[(), void] = test_case["function"];
    
    // Wrap the test execution to catch any errors
    try {
        test_function();
        passed = true;
    } catch (exception) {
        passed = false;
        error = "" + exception;
    }
    
    _current_test = null;
    
    duration: number = (clock() - start_time) * 1000; // Convert to milliseconds
    result: TestResult = {
        "test": test_case,
        "suite": suite,
        "passed": passed,
        "skipped": false,
        "duration": duration,
        "error": error
    };
    _test_results.push(result);
    
    if (passed) {
        print("✅ PASSED: " + test_case["name"] + " (" + _format_duration(duration) + ")");
    } else {
        print("❌ FAILED: " + test_case["name"]);
        if (_verbose_mode && error != null) {
            print("   " + error);
        }
    }
}

// ==================== Test Results ====================

$ _print_summary(): void {
    passed: number = 0;
    failed: number = 0;
    skipped: number = 0;
    total_time: number = 0;
    
    for (result in _test_results) {
        if (result["skipped"]) {
            skipped = skipped + 1;
        } else if (result["passed"]) {
            passed = passed + 1;
            total_time = total_time + result["duration"];
        } else {
            failed = failed + 1;
            total_time = total_time + result["duration"];
        }
    }
    
    print("\n" + _repeat_string("=", 50));
    print("📊 Test Summary");
    print(_repeat_string("=", 50));
    print("✅ Passed:  " + passed);
    print("❌ Failed:  " + failed);
    print("⏭️  Skipped: " + skipped);
    print("⏱️  Total:   " + _format_duration(total_time));
    
    if (failed > 0) {
        print("\n❌ Failed tests:");
        for (result in _test_results) {
            if (!result["passed"] && !result["skipped"]) {
                print("   - " + result["suite"]["name"] + " / " + result["test"]["name"]);
                if (result["error"] != null) {
                    print("     " + result["error"]);
                }
            }
        }
    }
    
    if (failed == 0 && passed > 0) {
        print("\n🎉 All tests passed!");
    }
}

$ _has_failures(): boolean {
    for (result in _test_results) {
        if (!result["passed"] && !result["skipped"]) {
            return true;
        }
    }
    return false;
}

// ==================== Configuration ====================

$ set_exit_on_failure(exit: boolean): void {
    _exit_on_failure = exit;
}

$ set_verbose(verbose: boolean): void {
    _verbose_mode = verbose;
}

// ==================== Helper Functions ====================

$ _fail(message: string): void {
    full_message: string = message;
    if (_current_test != null) {
        full_message = "Test '" + _current_test["name"] + "': " + message;
    }
    
    // Throw an error to stop test execution
    throw full_message;
}

$ _format_value(value: Any): string {
    if (value == null) {
        return "null";
    }
    if (_is_string(value)) {
        return "\"" + value + "\"";
    }
    if (_is_array(value)) {
        return _format_array(value);
    }
    return "" + value;
}

$ _format_array(arr: Array[Any]): string {
    result: string = "[";
    first: boolean = true;
    for (item in arr) {
        if (!first) {
            result = result + ", ";
        }
        result = result + _format_value(item);
        first = false;
    }
    result = result + "]";
    return result;
}

$ _format_duration(ms: number): string {
    if (ms < 1) {
        return "< 1ms";
    }
    return "" + ms + "ms";
}

$ _repeat_string(str: string, count: number): string {
    result: string = "";
    for (i = 0; i < count; i = i + 1) {
        result = result + str;
    }
    return result;
}

// ==================== Type Checking Helpers ====================

$ _is_string(value: Any): boolean {
    // Simple string type check - just convert to string and check if it's not "null"
    if (value == null) {
        return false;
    }
    // For now, assume non-null values that aren't arrays are strings
    // This is a simplified implementation
    str_value: string = "" + value;
    return str_value != "null" && !_is_array(value);
}

$ _is_array(value: Any): boolean {
    if (value == null) {
        return false;
    }
    // For now, just return false as a simplified implementation
    // In a real implementation, we'd check for array-specific properties
    return false;
}

// ==================== Exports ====================
// Export all public functions
export assert_true;
export assert_false;
export assert_equals;
export assert_not_equals;
export assert_null;
export assert_not_null;
export assert_greater_than;
export assert_less_than;
export assert_greater_equal;
export assert_less_equal;
export assert_almost_equal;
export assert_contains;
export assert_starts_with;
export assert_ends_with;
export assert_includes;
export assert_empty;
export assert_not_empty;
export assert_size;
export assert_throws;
export assert_no_throw;
export test;
export suite;
export skip;
export run_all;
export run_suite;
export set_exit_on_failure;
export set_verbose;