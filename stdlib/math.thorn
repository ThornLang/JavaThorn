export @immut PI = 3.141592653589793;
export @immut E = 2.718281828459045;
export @immut PHI = 1.618033988749895;

export $ abs(x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

export $ max(a, b) {
    if (a > b) {
        return a;
    }
    return b;
}

export $ min(a, b) {
    if (a < b) {
        return a;
    }
    return b;
}

export $ clamp(value, min_val, max_val) {
    return max(min_val, min(max_val, value));
}

export $ pow(base, exponent) {
    return base ** exponent;
}

export $ sqrt(x) {
    if (x < 0) {
        return null;
    }
    if (x == 0) {
        return 0;
    }
    
    guess = x / 2;
    epsilon = 0.000001;
    
    while (abs(guess * guess - x) > epsilon) {
        guess = (guess + x / guess) / 2;
    }
    
    return guess;
}

export $ sin(x) {
    result = 0;
    term = x;
    
    i = 1;
    while (i <= 10) {
        result = result + term;
        term = term * (-1) * x * x / ((2 * i) * (2 * i + 1));
        i = i + 1;
    }
    
    return result;
}

export $ cos(x) {
    result = 1;
    term = 1;
    
    i = 1;
    while (i <= 10) {
        term = term * (-1) * x * x / ((2 * i - 1) * (2 * i));
        result = result + term;
        i = i + 1;
    }
    
    return result;
}

export $ tan(x) {
    cos_x = cos(x);
    if (abs(cos_x) < 0.000001) {
        return null;
    }
    return sin(x) / cos_x;
}

export $ sign(x) {
    if (x > 0) {
        return 1;
    } else if (x < 0) {
        return -1;
    } else {
        return 0;
    }
}

export $ floor(x) {
    if (x >= 0) {
        return x - (x % 1);
    } else {
        remainder = x % 1;
        if (remainder == 0) {
            return x;
        } else {
            return x - remainder - 1;
        }
    }
}

export $ ceil(x) {
    if (x == floor(x)) {
        return x;
    }
    return floor(x) + 1;
}

export $ round(x) {
    if (x - floor(x) >= 0.5) {
        return ceil(x);
    } else {
        return floor(x);
    }
}