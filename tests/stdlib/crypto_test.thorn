import "crypto";

// Test 1: Basic hashing
print("MD5 hash of 'hello': " + md5("hello"));
print("SHA-1 hash of 'hello': " + sha1("hello"));
print("SHA-256 hash of 'hello': " + sha256("hello"));
print("SHA-384 hash of 'hello': " + sha384("hello"));
print("SHA-512 hash of 'hello': " + sha512("hello"));

// Test 2: Incremental hashing
hasher = create_hash("SHA-256");
hasher.update("Hello ");
hasher.update("World");
print("\nIncremental SHA-256 hash: " + hasher.hexdigest());

// Test 3: HMAC
key = "secret_key";
data = "message to authenticate";
hmac_result = hmac(key, data, "SHA-256");
print("\nHMAC-SHA256: " + hmac_result);

// Test 4: Key generation
key_bytes = generate_key("AES-256");
print("\nGenerated AES-256 key length: " + key_bytes.length + " bytes");

// Test 5: Encryption and decryption
plaintext = "This is a secret message!";
encryption_key = generate_key("AES-256");

// Encrypt
encrypted = encrypt(plaintext, encryption_key, "AES-256-GCM");
print("\nEncryption test:");
print("Original: " + plaintext);
print("Ciphertext length: " + encrypted["ciphertext"].length);
print("Nonce length: " + encrypted["nonce"].length);

// Decrypt
decrypted_bytes = decrypt(encrypted, encryption_key);
// For now, just check the length matches
print("Decrypted bytes length: " + decrypted_bytes.length);
print("Decryption successful: " + (decrypted_bytes.length == plaintext.length));

// Test 6: Base64 encoding/decoding
original = "Hello, Base64!";
encoded = base64_encode(original);
decoded_bytes = base64_decode(encoded);
print("\nBase64 encoding:");
print("Original: " + original);
print("Encoded: " + encoded);
print("Decoded bytes length: " + decoded_bytes.length);
print("Decode successful: " + (decoded_bytes.length == original.length));

// Test URL-safe base64
url_encoded = base64url_encode("Hello/World+Test");
print("URL-safe Base64: " + url_encoded);

// Test 7: Hex encoding/decoding
original_hex = "Hello Hex!";
hex_encoded = hex_encode(original_hex);
hex_decoded_bytes = hex_decode(hex_encoded);
print("\nHex encoding:");
print("Original: " + original_hex);
print("Encoded: " + hex_encoded);
print("Decoded bytes length: " + hex_decoded_bytes.length);
print("Decode successful: " + (hex_decoded_bytes.length == original_hex.length));

// Test 8: Secure random generation
random_bytes = random_bytes(16);
print("\nSecure random bytes (16): " + random_bytes.length + " bytes generated");

random_token = random_token(24);
print("Random token (24 chars): " + random_token);
print("Token length: " + random_token.length);

// Test 9: Salt generation
salt = generate_salt(16);
print("\nGenerated salt length: " + salt.length + " bytes");

// Test 10: Constant-time comparison
bytes1 = [72, 101, 108, 108, 111];  // "Hello"
bytes2 = [72, 101, 108, 108, 111];  // "Hello"
bytes3 = [72, 101, 108, 108, 112];  // "Hellp"

print("\nConstant-time comparison:");
print("'Hello' == 'Hello': " + compare_digest(bytes1, bytes2));
print("'Hello' == 'Hellp': " + compare_digest(bytes1, bytes3));

// Test with string comparison
print("String comparison: " + compare_digest("test", "test"));
print("String comparison (diff): " + compare_digest("test", "best"));

print("\nâœ… Crypto module tests completed!");