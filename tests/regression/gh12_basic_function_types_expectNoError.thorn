import { assert_equals, assert_true, assert_false, test, suite, run_all } from "test";

// Test basic function type syntax with parameter types

suite("Basic Function Types", $() => {
    test("function with one parameter", $() => {
        validator: Function[(string), boolean] = $(s) => s.length > 0;
        
        assert_true(validator("hello"), "validator should return true for non-empty string");
        assert_false(validator(""), "validator should return false for empty string");
    });
    
    test("function with two parameters", $() => {
        adder: Function[(number, number), number] = $(a, b) => a + b;
        
        assert_equals(8, adder(5, 3), "adder should correctly add two numbers");
        assert_equals(0, adder(-5, 5), "adder should handle negative numbers");
        assert_equals(-10, adder(-4, -6), "adder should handle two negative numbers");
    });
    
    test("function with no parameters", $() => {
        called = false;
        callback: Function[(), void] = $() => { called = true; };
        
        callback();
        assert_true(called, "callback should have been called");
    });
    
    test("function type compatibility", $() => {
        // Test that function types work with variable assignment
        fn1: Function[(number), number] = $(x) => x * 2;
        fn2: Function[(number), number] = fn1;
        
        assert_equals(10, fn2(5), "assigned function should work correctly");
    });
});

run_all();