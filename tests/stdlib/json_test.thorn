// Test: JSON module functionality
// Tests parsing, stringifying, and manipulation of JSON data

// Test 1: Basic parsing
json_str = "{\"name\": \"Alice\", \"age\": 30, \"active\": true}";
data = json.parse(json_str);
print("Parsed name: " + json.get(data, "name"));
print("Parsed age: " + json.get(data, "age"));
print("Parsed active: " + json.get(data, "active"));

// Test 2: Stringify
obj = {"hello": "world", "number": 42};
json_output = json.stringify(obj);
print("Stringified: " + json_output);

// Test 3: Pretty print
pretty = json.stringify_pretty(obj, 4);
print("Pretty printed:");
print(pretty);

// Test 4: Arrays
arr_str = "[1, 2, 3, \"four\", true, null]";
arr = json.parse(arr_str);
print("Array parsed, length: " + arr.length);

// Test 5: Nested objects
nested = {
    "user": {
        "profile": {
            "name": "Bob",
            "email": "bob@example.com"
        },
        "settings": {
            "theme": "dark",
            "notifications": true
        }
    }
};

// Test dot notation access
user_name = json.get(nested, "user.profile.name");
theme = json.get(nested, "user.settings.theme");
print("User name from nested: " + user_name);
print("Theme from nested: " + theme);

// Test 6: Set values
json.set(nested, "user.profile.age", 25);
json.set(nested, "user.settings.language", "en");
print("After set operations:");
print(json.stringify_pretty(nested));

// Test 7: Merge objects
defaults = {"timeout": 30, "retries": 3, "debug": false};
user_config = {"timeout": 60, "debug": true};
merged = json.merge(defaults, user_config);
print("Merged config:");
print(json.stringify(merged));

// Test 8: Validation
valid_json = "{\"valid\": true}";
invalid_json = "{invalid json}";
print("Is valid JSON: " + json.is_valid(valid_json));
print("Is invalid JSON: " + json.is_valid(invalid_json));

// Test 9: Has method
print("Has user.profile.name: " + json.has(nested, "user.profile.name"));
print("Has user.profile.phone: " + json.has(nested, "user.profile.phone"));

// Test 10: Complex data types
complex = {
    "string": "hello",
    "number": 3.14159,
    "boolean": true,
    "null_value": null,
    "array": [1, 2, 3],
    "object": {"nested": "value"}
};
print("Complex object stringified:");
print(json.stringify_pretty(complex));

// Test 11: Special characters
special = {"quote": "He said \"hello\"", "newline": "line1\nline2", "tab": "col1\tcol2"};
special_json = json.stringify(special);
print("Special characters: " + special_json);
parsed_special = json.parse(special_json);
print("Parsed back: " + json.get(parsed_special, "newline"));

print("âœ… JSON module tests completed!");