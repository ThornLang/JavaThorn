export class Result {
    $ init(success, value, error) {
        this.success = success;
        this.value = value;
        this.error = error;
    }
    
    $ is_ok() {
        return this.success;
    }
    
    $ is_error() {
        return !this.success;
    }
    
    $ get_value() {
        if (this.success) {
            return this.value;
        }
        return null;
    }
    
    $ get_error() {
        if (!this.success) {
            return this.error;
        }
        return null;
    }
    
    $ unwrap() {
        if (this.success) {
            return this.value;
        }
        print("ERROR: Attempted to unwrap failed result: " + this.error);
        return null;
    }
    
    $ unwrap_or(default_value) {
        if (this.success) {
            return this.value;
        }
        return default_value;
    }
}

export $ ok(value) {
    return Result(true, value, null);
}

export $ error(error_message) {
    return Result(false, null, error_message);
}

export $ assert(condition, message) {
    if (!condition) {
        error_msg = message ?? "Assertion failed";
        print("ASSERTION ERROR: " + error_msg);
        return false;
    }
    return true;
}

export $ assert_not_null(value, message) {
    if (value == null) {
        error_msg = message ?? "Value must not be null";
        print("ASSERTION ERROR: " + error_msg);
        return false;
    }
    return true;
}

export $ safe_divide(a, b) {
    if (b == 0) {
        return error("Division by zero");
    }
    return ok(a / b);
}

export $ safe_array_get(array, index) {
    if (array == null) {
        return error("Array cannot be null");
    }
    if (index < 0 || index >= array.length) {
        return error("Index " + index + " is out of bounds for array of length " + array.length);
    }
    return ok(array[index]);
}