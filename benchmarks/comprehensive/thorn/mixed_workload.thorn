// Mixed workload benchmark - tests multiple optimizations together
@immut SIZE = 1000;

class DataProcessor {
    $ init() {
        this.data = [];
        this.cache = {};
    }
    
    $ process(values) {
        result = 0;
        
        // Test for-in loop optimization
        for (v in values) {
            // Test arithmetic fast paths
            squared = v * v;
            result = result + squared;
            
            // Test method calls and property access
            this.data.push(squared);
        }
        
        // Test while loop optimization
        i = 0;
        while (i < this.data.length) {
            result = result / 2;
            i = i + 1;
        }
        
        return result;
    }
    
    $ recursive_process(n, acc) {
        if (n <= 0) {
            return acc;
        }
        
        // Test return optimization with multiple recursive calls
        return this.recursive_process(n - 1, acc + n);
    }
}

// Generate test data
test_data = [];
i = 0;
while (i < SIZE) {
    test_data.push(i * 0.5);
    i = i + 1;
}

start_time = clock();

processor = DataProcessor();
result1 = processor.process(test_data);
result2 = processor.recursive_process(100, 0);

// String building test
message = "";
j = 0;
while (j < 100) {
    message = message + "Result: " + j + " ";
    j = j + 1;
}

end_time = clock();

print("Mixed workload results: " + result1 + ", " + result2);
print("Message length: " + message.length);
print("Time: " + (end_time - start_time) + "ms");