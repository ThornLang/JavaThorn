// Test higher-order function types

// Map function type
map_array: Function[(Array[number], Function[(number), number]), Array[number]] = $(arr, fn) => {
    result = [];
    for (item in arr) {
        result.push(fn(item));
    }
    return result;
};

// Filter function type  
filter_array: Function[(Array[number], Function[(number), boolean]), Array[number]] = $(arr, predicate) => {
    result = [];
    for (item in arr) {
        if (predicate(item)) {
            result.push(item);
        }
    }
    return result;
};

// Test data
numbers = [1, 2, 3, 4, 5];

// Test map
squared = map_array(numbers, $(x) => x * x);
print("Squared: " + squared);

// Test filter
evens = filter_array(numbers, $(x) => x % 2 == 0);
print("Evens: " + evens);

// Compose functions
double_then_square: Function[(number), number] = $(x) => {
    double: Function[(number), number] = $(n) => n * 2;
    square: Function[(number), number] = $(n) => n * n;
    return square(double(x));
};

print("double_then_square(3): " + double_then_square(3));