export $ len(str) {
    return str.length;
}

export $ upper(str) {
    result = "";
    i = 0;
    while (i < str.length) {
        char = str[i];
        code = char_code(char);
        if (code >= 97 && code <= 122) {
            result = result + char_from_code(code - 32);
        } else {
            result = result + char;
        }
        i = i + 1;
    }
    return result;
}

export $ lower(str) {
    result = "";
    i = 0;
    while (i < str.length) {
        char = str[i];
        code = char_code(char);
        if (code >= 65 && code <= 90) {
            result = result + char_from_code(code + 32);
        } else {
            result = result + char;
        }
        i = i + 1;
    }
    return result;
}

export $ trim(str) {
    if (str.length == 0) {
        return str;
    }
    
    start = 0;
    while (start < str.length && is_whitespace(str[start])) {
        start = start + 1;
    }
    
    end = str.length - 1;
    while (end > start && is_whitespace(str[end])) {
        end = end - 1;
    }
    
    return substring(str, start, end + 1);
}

export $ starts_with(str, prefix) {
    if (prefix.length > str.length) {
        return false;
    }
    
    i = 0;
    while (i < prefix.length) {
        if (str[i] != prefix[i]) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

export $ ends_with(str, suffix) {
    if (suffix.length > str.length) {
        return false;
    }
    
    str_pos = str.length - suffix.length;
    suffix_pos = 0;
    
    while (suffix_pos < suffix.length) {
        if (str[str_pos] != suffix[suffix_pos]) {
            return false;
        }
        str_pos = str_pos + 1;
        suffix_pos = suffix_pos + 1;
    }
    return true;
}

export $ index_of(str, substring) {
    if (substring.length > str.length) {
        return -1;
    }
    
    i = 0;
    while (i <= str.length - substring.length) {
        found = true;
        j = 0;
        while (j < substring.length) {
            if (str[i + j] != substring[j]) {
                found = false;
                break;
            }
            j = j + 1;
        }
        if (found) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

export $ contains(str, substring) {
    return index_of(str, substring) != -1;
}

export $ replace(str, old, new) {
    if (old.length == 0) {
        return str;
    }
    
    result = "";
    i = 0;
    
    while (i < str.length) {
        if (i <= str.length - old.length && substring(str, i, i + old.length) == old) {
            result = result + new;
            i = i + old.length;
        } else {
            result = result + str[i];
            i = i + 1;
        }
    }
    
    return result;
}

export $ split(str, delimiter) {
    result = [];
    if (delimiter.length == 0) {
        i = 0;
        while (i < str.length) {
            result[i] = str[i];
            i = i + 1;
        }
        return result;
    }
    
    current = "";
    i = 0;
    result_index = 0;
    
    while (i < str.length) {
        if (i <= str.length - delimiter.length && substring(str, i, i + delimiter.length) == delimiter) {
            result[result_index] = current;
            result_index = result_index + 1;
            current = "";
            i = i + delimiter.length;
        } else {
            current = current + str[i];
            i = i + 1;
        }
    }
    
    result[result_index] = current;
    return result;
}

export $ join(arr, separator) {
    if (arr.length == 0) {
        return "";
    }
    
    result = arr[0];
    i = 1;
    
    while (i < arr.length) {
        result = result + separator + arr[i];
        i = i + 1;
    }
    
    return result;
}

export $ repeat(str, n) {
    result = "";
    i = 0;
    while (i < n) {
        result = result + str;
        i = i + 1;
    }
    return result;
}

export $ pad_left(str, length, fill) {
    if (str.length >= length) {
        return str;
    }
    padding = repeat(fill, length - str.length);
    return padding + str;
}

export $ pad_right(str, length, fill) {
    if (str.length >= length) {
        return str;
    }
    padding = repeat(fill, length - str.length);
    return str + padding;
}

$ is_whitespace(char) {
    return char == " " || char == "\t" || char == "\n" || char == "\r";
}

$ substring(str, start, end) {
    result = "";
    i = start;
    while (i < end && i < str.length) {
        result = result + str[i];
        i = i + 1;
    }
    return result;
}

$ char_code(char) {
    if (char == "a") return 97; if (char == "b") return 98; if (char == "c") return 99;
    if (char == "d") return 100; if (char == "e") return 101; if (char == "f") return 102;
    if (char == "g") return 103; if (char == "h") return 104; if (char == "i") return 105;
    if (char == "j") return 106; if (char == "k") return 107; if (char == "l") return 108;
    if (char == "m") return 109; if (char == "n") return 110; if (char == "o") return 111;
    if (char == "p") return 112; if (char == "q") return 113; if (char == "r") return 114;
    if (char == "s") return 115; if (char == "t") return 116; if (char == "u") return 117;
    if (char == "v") return 118; if (char == "w") return 119; if (char == "x") return 120;
    if (char == "y") return 121; if (char == "z") return 122;
    
    if (char == "A") return 65; if (char == "B") return 66; if (char == "C") return 67;
    if (char == "D") return 68; if (char == "E") return 69; if (char == "F") return 70;
    if (char == "G") return 71; if (char == "H") return 72; if (char == "I") return 73;
    if (char == "J") return 74; if (char == "K") return 75; if (char == "L") return 76;
    if (char == "M") return 77; if (char == "N") return 78; if (char == "O") return 79;
    if (char == "P") return 80; if (char == "Q") return 81; if (char == "R") return 82;
    if (char == "S") return 83; if (char == "T") return 84; if (char == "U") return 85;
    if (char == "V") return 86; if (char == "W") return 87; if (char == "X") return 88;
    if (char == "Y") return 89; if (char == "Z") return 90;
    
    return 0;
}

$ char_from_code(code) {
    if (code == 97) return "a"; if (code == 98) return "b"; if (code == 99) return "c";
    if (code == 100) return "d"; if (code == 101) return "e"; if (code == 102) return "f";
    if (code == 103) return "g"; if (code == 104) return "h"; if (code == 105) return "i";
    if (code == 106) return "j"; if (code == 107) return "k"; if (code == 108) return "l";
    if (code == 109) return "m"; if (code == 110) return "n"; if (code == 111) return "o";
    if (code == 112) return "p"; if (code == 113) return "q"; if (code == 114) return "r";
    if (code == 115) return "s"; if (code == 116) return "t"; if (code == 117) return "u";
    if (code == 118) return "v"; if (code == 119) return "w"; if (code == 120) return "x";
    if (code == 121) return "y"; if (code == 122) return "z";
    
    if (code == 65) return "A"; if (code == 66) return "B"; if (code == 67) return "C";
    if (code == 68) return "D"; if (code == 69) return "E"; if (code == 70) return "F";
    if (code == 71) return "G"; if (code == 72) return "H"; if (code == 73) return "I";
    if (code == 74) return "J"; if (code == 75) return "K"; if (code == 76) return "L";
    if (code == 77) return "M"; if (code == 78) return "N"; if (code == 79) return "O";
    if (code == 80) return "P"; if (code == 81) return "Q"; if (code == 82) return "R";
    if (code == 83) return "S"; if (code == 84) return "T"; if (code == 85) return "U";
    if (code == 86) return "V"; if (code == 87) return "W"; if (code == 88) return "X";
    if (code == 89) return "Y"; if (code == 90) return "Z";
    
    return "?";
}