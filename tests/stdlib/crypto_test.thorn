// Test: Crypto module functionality
// Tests hashing, encryption, encoding, and secure random generation

// Test 1: Basic hashing
print("MD5 hash of 'hello': " + crypto.md5("hello"));
print("SHA-1 hash of 'hello': " + crypto.sha1("hello"));
print("SHA-256 hash of 'hello': " + crypto.sha256("hello"));
print("SHA-384 hash of 'hello': " + crypto.sha384("hello"));
print("SHA-512 hash of 'hello': " + crypto.sha512("hello"));

// Test 2: Incremental hashing
hasher = crypto.createHash("SHA-256");
hasher.update("Hello ");
hasher.update("World");
print("\nIncremental SHA-256 hash: " + hasher.hexdigest());

// Test 3: HMAC
key = "secret_key";
data = "message to authenticate";
hmac_result = crypto.hmac(key, data, "SHA-256");
print("\nHMAC-SHA256: " + hmac_result);

// Test 4: Key generation
key_bytes = crypto.generateKey("AES-256");
print("\nGenerated AES-256 key length: " + key_bytes.length + " bytes");

// Test 5: Encryption and decryption
plaintext = "This is a secret message!";
encryption_key = crypto.generateKey("AES-256");

// Encrypt
encrypted = crypto.encrypt(plaintext, encryption_key, "AES-256-GCM");
print("\nEncryption test:");
print("Original: " + plaintext);
print("Ciphertext length: " + encrypted["ciphertext"].length);
print("Nonce length: " + encrypted["nonce"].length);

// Decrypt
decrypted_bytes = crypto.decrypt(encrypted, encryption_key);
// Convert bytes back to string
decrypted = "";
for (b in decrypted_bytes) {
    decrypted = decrypted + String.fromCharCode(b);
}
print("Decrypted: " + decrypted);
print("Decryption successful: " + (decrypted == plaintext));

// Test 6: Base64 encoding/decoding
original = "Hello, Base64!";
encoded = crypto.base64Encode(original);
decoded_bytes = crypto.base64Decode(encoded);
decoded = "";
for (b in decoded_bytes) {
    decoded = decoded + String.fromCharCode(b);
}
print("\nBase64 encoding:");
print("Original: " + original);
print("Encoded: " + encoded);
print("Decoded: " + decoded);

// Test URL-safe base64
url_encoded = crypto.base64urlEncode("Hello/World+Test");
print("URL-safe Base64: " + url_encoded);

// Test 7: Hex encoding/decoding
hex_encoded = crypto.hexEncode("Hello Hex!");
hex_decoded_bytes = crypto.hexDecode(hex_encoded);
hex_decoded = "";
for (b in hex_decoded_bytes) {
    hex_decoded = hex_decoded + String.fromCharCode(b);
}
print("\nHex encoding:");
print("Original: Hello Hex!");
print("Encoded: " + hex_encoded);
print("Decoded: " + hex_decoded);

// Test 8: Secure random generation
random_bytes = crypto.randomBytes(16);
print("\nSecure random bytes (16): " + random_bytes.length + " bytes generated");

random_token = crypto.randomToken(24);
print("Random token (24 chars): " + random_token);
print("Token length: " + random_token.length);

// Test 9: Salt generation
salt = crypto.generateSalt(16);
print("\nGenerated salt length: " + salt.length + " bytes");

// Test 10: Constant-time comparison
bytes1 = [72, 101, 108, 108, 111];  // "Hello"
bytes2 = [72, 101, 108, 108, 111];  // "Hello"
bytes3 = [72, 101, 108, 108, 112];  // "Hellp"

print("\nConstant-time comparison:");
print("'Hello' == 'Hello': " + crypto.compareDigest(bytes1, bytes2));
print("'Hello' == 'Hellp': " + crypto.compareDigest(bytes1, bytes3));

// Test with string comparison
print("String comparison: " + crypto.compareDigest("test", "test"));
print("String comparison (diff): " + crypto.compareDigest("test", "best"));

print("\nâœ… Crypto module tests completed!");